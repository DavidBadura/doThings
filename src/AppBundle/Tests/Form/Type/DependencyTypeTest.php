<?php

namespace AppBundle\Tests\Form\Type;

use AppBundle\Form\Type\DependencyType;
use DavidBadura\Taskwarrior\Task;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Form\Test\TypeTestCase;

class DependencyTypeTest extends TypeTestCase
{
    protected function setUp()
    {
        parent::setUp();

        $this->choices = array(
            $this->objectFactory('40df5649-f3f4-41d7-b29a-b7d9663db5ab', 'DependencyType0'),
            $this->objectFactory('eedcd050-8279-4e74-af09-d6c17b9793fa', 'DependencyType1'),
            $this->objectFactory('e8eb1026-a3c7-489d-817d-02fc3dd576d7', 'DependencyType2'),
            $this->objectFactory('5f25bd57-1a54-4634-bde1-3c303fab3acb', 'DependencyType3'),
        );
    }

    protected function tearDown()
    {
        parent::tearDown();
        $this->choices = null;
    }

    public function testSubmitValidData()
    {
        // "submit" two choices (test default:multiple and uuid as value mapping)
        $submitData = [$this->choices[0]->getUuid(), $this->choices[2]->getUuid()];

        // Type transforms to ArrayCollection that Task class uses internallu for dependency list
        // get expectations by fetching dependencies from task so that any internal changes would
        // fail the tst and show required type change.
        $testedFeature = new Task;
        $testedFeature->addDependency($this->choices[0]);
        $testedFeature->addDependency($this->choices[2]);
        $expectedMapping = $testedFeature->getDependencies();

        // prepare & "submit" form under test
        $form = $this->factory->create(DependencyType::class, null, ['choices' => $this->choices]);
        $form->submit($submitData);

        // assertions follow...
        $this->assertEquals($expectedMapping, $form->getData());
        $this->assertTrue($form->isSynchronized());
    }

    public function testSubmitInvalidData()
    {
        // "submit" invalid choice
        $submitData = ['aa1d0992-5634-4293-8e59-2bb86d951a8a'];

        // prepare & "submit" form under test
        $form = $this->factory->create(DependencyType::class, null, ['choices' => $this->choices]);
        $form->submit($submitData);

        // assertions follow...
        $this->assertNull($form->getData());
        $this->assertFalse($form->isSynchronized());
    }

    public function testViewData()
    {
        // prepare view from available choices
        $formView = $this->factory
            ->create(DependencyType::class, null, ['choices' => $this->choices])
            ->createView();

        // assertions follow (checks extracting value/label from Task object)...
        $this->assertSame($this->choices[0]->getUuid(), $formView->vars['choices'][0]->value);
        $this->assertSame($this->choices[0]->getDescription(), $formView->vars['choices'][0]->label);
    }

    protected function objectFactory($uuidValue, $description)
    {
        $testObject = new Task();
        $testObject->setDescription($description);

        // uuid is a private property that is generated by task utility on save;
        // it's set here as a mock to produce self contained tests
        $uuid = new \ReflectionProperty(Task::class, 'uuid');
        $uuid->setAccessible(true);
        $uuid->setValue($testObject, $uuidValue);

        return $testObject;
    }
}
